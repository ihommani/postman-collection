{
	"info": {
		"name": "Google authentication playground pre collection script",
		"_postman_id": "755a0f37-1327-3ce4-73ac-5ec9724a6b2e",
		"description": "# Purpose    \nSet of requests to some Google APIs.  \nEach request requires an Authentication through an OAuth2 token. \nThis collection also includes a flow through a pre-collection script to automatically refresh the token in case the latter is expired or invalid.\n\n# Installation\n## Environment\nFor this collection to work we need an environment with the following keys:   \n\n* token\n* userId\n* clientId\n* clientSecret\n* refreshToken\n* lastRequestId\n* isTokenValid\n\n###  Token\nContain the OAuth2 token. Let it empty. \n\n### userId\nUser id used for the request to the Google APIs.  \nSet it to *me*.\n\n### clientId\nGoogle OAuth2 client Id. Set the value with the id of the generated client in the next section.  \n\n### clientSecret\nGoogle OAuth2 client secret. Set the value with the id of the generated client in the next section. \n\n### refreshToken\nOAuth2 refresh token to initialize with the one we get in the OAuth2 playground.   \nSee next section.\n\n### lastRequestId\nUsed for the flow in the collection.   \nIf a request detects an invalid token, then it set the refresh request as the next one and set the *lastRequestId* with its own id.  \nAfter the refresh, the next request is set to *lastRequestId* and the flow keeps going on.\n\n## Google cloud project\nTo use this collection, you must create a google cloud platform project and create an OAuth2 web client.  \nOnce created, white list the callback URL *https://www.getpostman.com/oauth2/callback*.  \n\n## Enabling APIs\nTo play around with Google+ and Gmail API, enable these APIs for your project.\n\n## Generating a refresh token\nIn order to let Postman generates a valid token, we will set in a dedicated environment variable a refresh token.  \nGo to the Google [OAuth2 playground](https://developers.google.com/oauthplayground/) and set your own OAuth credential with the one of the previously created OAuth2 client (click on the Gear on the right corner).  \nDo not forget to check *offline access*.\nSet the scopes:\n\n* https://www.googleapis.com/auth/contacts   \n* https://www.googleapis.com/auth/plus.me  \n* https://mail.google.com/ \n\nYou can now generate your token, and get the associated refresh token that you copy/paste in your postman environment under the key *refreshToken*.  \n\n# Authentication\nAuthentication is made following the Google OAuth2 flow.  \nFor more information please refer to the following links:  \n\n* [Google Identity Platform](https://developers.google.com/identity/protocols/OAuth2WebServer#exchange-authorization-code)    \n\n* [Oauth2 playground](https://developers.google.com/oauthplayground/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get user info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4cf7ff31-a8d6-4f60-beb3-bbd05ae4f7e5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"type": "any"
						},
						{
							"key": "addTokenTo",
							"type": "any"
						},
						{
							"key": "callBackUrl",
							"type": "any"
						},
						{
							"key": "authUrl",
							"type": "any"
						},
						{
							"key": "accessTokenUrl",
							"type": "any"
						},
						{
							"key": "clientId",
							"type": "any"
						},
						{
							"key": "clientSecret",
							"type": "any"
						},
						{
							"key": "clientAuth",
							"type": "any"
						},
						{
							"key": "grantType",
							"type": "any"
						},
						{
							"key": "scope",
							"type": "any"
						},
						{
							"key": "username",
							"type": "any"
						},
						{
							"key": "password",
							"type": "any"
						},
						{
							"key": "tokenType",
							"type": "any"
						},
						{
							"key": "redirectUri",
							"type": "any"
						},
						{
							"key": "refreshToken",
							"type": "any"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {},
				"url": {
					"raw": "https://www.googleapis.com/plus/v1/people/{{userId}}",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"plus",
						"v1",
						"people",
						"{{userId}}"
					]
				},
				"description": "# Purpose\nGet google account information about an account.  \nTo get information about yourself an alias for the userId is **me**."
			},
			"response": []
		},
		{
			"name": "Get gmail profile",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2fb89c4c-30a0-440e-8310-0869ae297dde",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {},
				"url": {
					"raw": "https://www.googleapis.com/gmail/v1/users/{{userId}}/profile",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"gmail",
						"v1",
						"users",
						"{{userId}}",
						"profile"
					]
				},
				"description": "# Purpose\nGetting some basic Gmail informations about a given user."
			},
			"response": [
				{
					"id": "4a1ce446-3517-4a26-b617-c3531f320402",
					"name": "Get gmail profile",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"disabled": false
							}
						],
						"body": {},
						"url": {
							"raw": "https://www.googleapis.com/gmail/v1/users/{{userId}}/profile",
							"protocol": "https",
							"host": [
								"www",
								"googleapis",
								"com"
							],
							"path": [
								"gmail",
								"v1",
								"users",
								"{{userId}}",
								"profile"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"_postman_previewtype": "text",
					"header": [
						{
							"key": "Alt-Svc",
							"value": "quic=\":443\"; ma=2592000; v=\"39,38,37,35\"",
							"name": "Alt-Svc",
							"description": "Custom header"
						},
						{
							"key": "Cache-Control",
							"value": "private, max-age=0, must-revalidate, no-transform",
							"name": "Cache-Control",
							"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip",
							"name": "Content-Encoding",
							"description": "The type of encoding used on the data."
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=UTF-8",
							"name": "Content-Type",
							"description": "The mime type of this content"
						},
						{
							"key": "Date",
							"value": "Sun, 01 Oct 2017 18:37:06 GMT",
							"name": "Date",
							"description": "The date and time that the message was sent"
						},
						{
							"key": "ETag",
							"value": "\"n7JQc-221gnWXUeVwWxW4ceYE3w/8XWwJQzsLW_ZupzEoP5hvKKezdQ\"",
							"name": "ETag",
							"description": "An identifier for a specific version of a resource, often a message digest"
						},
						{
							"key": "Expires",
							"value": "Sun, 01 Oct 2017 18:37:06 GMT",
							"name": "Expires",
							"description": "Gives the date/time after which the response is considered stale"
						},
						{
							"key": "Server",
							"value": "GSE",
							"name": "Server",
							"description": "A name for the server"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked",
							"name": "Transfer-Encoding",
							"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
						},
						{
							"key": "Vary",
							"value": "Origin",
							"name": "Vary",
							"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
						},
						{
							"key": "Vary",
							"value": "X-Origin",
							"name": "Vary",
							"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff",
							"name": "X-Content-Type-Options",
							"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
						},
						{
							"key": "X-Frame-Options",
							"value": "SAMEORIGIN",
							"name": "X-Frame-Options",
							"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
						},
						{
							"key": "X-XSS-Protection",
							"value": "1; mode=block",
							"name": "X-XSS-Protection",
							"description": "Cross-site scripting (XSS) filter"
						}
					],
					"cookie": [],
					"responseTime": 147,
					"body": "{\n    \"emailAddress\": \"toto@gmail.com\",\n    \"messagesTotal\": 32228,\n    \"threadsTotal\": 25000,\n    \"historyId\": \"3795870\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e9a36c0b-8136-4de7-bf3e-e19b6db9ccab",
				"type": "text/javascript",
				"exec": [
					"var full_token_verification_url = pm.environment.get('token_verification_url') + ",
					"'?access_token=' + pm.environment.get('token');",
					"",
					"var full_refresh_token_url = pm.environment.get('refresh_token_url') + ",
					"'?client_id=' + pm.environment.get('clientId') + ",
					"'&client_secret=' + pm.environment.get('clientSecret') +",
					"'&refresh_token=' + pm.environment.get('refreshToken') +",
					"'&grant_type=refresh_token';",
					"",
					"const refreshRequest = {",
					"  url: full_refresh_token_url,",
					"  method: 'POST',",
					"};",
					"",
					"var verifyToken = function (err, res) {",
					"    if (err) {",
					"        console.log(err);",
					"    } else {",
					"        var response = res.json();",
					"        if(response.error || response.expires_in < pm.environment.get('minTokenTime')){",
					"             pm.sendRequest(refreshRequest, refresToken);",
					"        }",
					"        ",
					"    }",
					"}",
					"",
					"var refresToken = function (err, res) {",
					"          if (err) {",
					"               console.log(err);",
					"            } else {",
					"                 var response = res.json();",
					"                if(response.access_token){",
					"                    console.log('Refreshed token');",
					"                    pm.environment.set(\"token\", response.access_token);",
					"                }",
					"        }",
					"}",
					"",
					"pm.sendRequest(full_token_verification_url, verifyToken);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "77def9df-7c92-44ad-86f8-8ce14c025c2e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "042cec72-a5de-4686-ad8e-d029e2bff3a1",
			"key": "hello",
			"value": "world",
			"type": "text"
		}
	]
}